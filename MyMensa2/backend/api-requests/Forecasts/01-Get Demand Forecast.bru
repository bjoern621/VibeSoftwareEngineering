meta {
  name: Get Demand Forecast
  type: http
  seq: 1
}

get {
  url: http://localhost:8081/api/forecasts/demand?startDate=2025-01-20&endDate=2025-01-24
  body: none
  auth: none
}

params:query {
  startDate: 2025-01-20
  endDate: 2025-01-24
}

tests {
  test("Status should be 200", function() {
    expect(res.status).to.equal(200);
  });
  
  test("Response should contain forecast period", function() {
    expect(res.body).to.have.property('forecastPeriod');
    expect(res.body.forecastPeriod).to.have.property('startDate');
    expect(res.body.forecastPeriod).to.have.property('endDate');
  });
  
  test("Response should contain meal forecasts", function() {
    expect(res.body).to.have.property('mealForecasts');
    expect(res.body.mealForecasts).to.be.an('array');
  });
  
  test("Each meal forecast should have required fields", function() {
    if (res.body.mealForecasts.length > 0) {
      const forecast = res.body.mealForecasts[0];
      expect(forecast).to.have.property('mealName');
      expect(forecast).to.have.property('averageDailyDemand');
      expect(forecast).to.have.property('recommendedStock');
      expect(forecast).to.have.property('confidenceLevel');
    }
  });
  
  test("Response should contain ingredient forecasts", function() {
    expect(res.body).to.have.property('ingredientForecasts');
    expect(res.body.ingredientForecasts).to.be.an('array');
  });
  
  test("Each ingredient forecast should have required fields", function() {
    if (res.body.ingredientForecasts.length > 0) {
      const forecast = res.body.ingredientForecasts[0];
      expect(forecast).to.have.property('ingredientName');
      expect(forecast).to.have.property('estimatedConsumption');
      expect(forecast).to.have.property('currentStock');
      expect(forecast).to.have.property('recommendedPurchase');
    }
  });
}
